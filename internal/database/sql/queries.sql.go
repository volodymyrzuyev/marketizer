// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: queries.sql

package custSql

import (
	"context"
	"database/sql"
)

const addAsset = `-- name: AddAsset :exec
INSERT INTO
    items (ASSET_ID, MARKET_HASH_NAME, PRICE, APPID, TIME, IMAGE)
VALUES
    (?1, ?2, ?3, ?4, ?5, ?6)
`

type AddAssetParams struct {
	AssetID        int64
	MarketHashName string
	Price          int64
	Appid          int64
	Time           int64
	Image          string
}

func (q *Queries) AddAsset(ctx context.Context, arg AddAssetParams) error {
	_, err := q.db.ExecContext(ctx, addAsset,
		arg.AssetID,
		arg.MarketHashName,
		arg.Price,
		arg.Appid,
		arg.Time,
		arg.Image,
	)
	return err
}

const add_User = `-- name: Add_User :exec
INSERT INTO 
    users (NAME, EMAIL, PASSWORD)
VALUES
    (?1, ?2, ?3)
`

type Add_UserParams struct {
	Name     sql.NullString
	Email    string
	Password sql.NullString
}

func (q *Queries) Add_User(ctx context.Context, arg Add_UserParams) error {
	_, err := q.db.ExecContext(ctx, add_User, arg.Name, arg.Email, arg.Password)
	return err
}

const create_table1 = `-- name: Create_table1 :exec
CREATE TABLE IF NOT EXISTS users(
    NAME TEXT,
    EMAIL TEXT PRIMARY KEY,
    PASSWORD TEXT
)
`

func (q *Queries) Create_table1(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, create_table1)
	return err
}

const create_table2 = `-- name: Create_table2 :exec
CREATE TABLE IF NOT EXISTS follows(
    ID INTEGER PRIMARY KEY,
    EMAIL INTEGER,
    MARKET_HASH_NAME TEXT
)
`

func (q *Queries) Create_table2(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, create_table2)
	return err
}

const create_table3 = `-- name: Create_table3 :exec
CREATE TABLE IF NOT EXISTS items(
    ASSET_ID INTEGER PRIMARY KEY,
    MARKET_HASH_NAME TEXT,
    PRICE INTEGER,
    APPID INTEGER,
    TIME INTEGER,
    IMAGE TEXT NOT NULL
)
`

func (q *Queries) Create_table3(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, create_table3)
	return err
}

const getItemsNameASC = `-- name: GetItemsNameASC :many
SELECT asset_id, market_hash_name, price, appid, time, image FROM items ORDER BY MARKET_HASH_NAME ASC
`

func (q *Queries) GetItemsNameASC(ctx context.Context) ([]Item, error) {
	rows, err := q.db.QueryContext(ctx, getItemsNameASC)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Item
	for rows.Next() {
		var i Item
		if err := rows.Scan(
			&i.AssetID,
			&i.MarketHashName,
			&i.Price,
			&i.Appid,
			&i.Time,
			&i.Image,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getItemsNameDESC = `-- name: GetItemsNameDESC :many
SELECT asset_id, market_hash_name, price, appid, time, image FROM items ORDER BY MARKET_HASH_NAME DESC
`

func (q *Queries) GetItemsNameDESC(ctx context.Context) ([]Item, error) {
	rows, err := q.db.QueryContext(ctx, getItemsNameDESC)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Item
	for rows.Next() {
		var i Item
		if err := rows.Scan(
			&i.AssetID,
			&i.MarketHashName,
			&i.Price,
			&i.Appid,
			&i.Time,
			&i.Image,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getItemsPriceASC = `-- name: GetItemsPriceASC :many
SELECT asset_id, market_hash_name, price, appid, time, image FROM items ORDER BY price ASC
`

func (q *Queries) GetItemsPriceASC(ctx context.Context) ([]Item, error) {
	rows, err := q.db.QueryContext(ctx, getItemsPriceASC)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Item
	for rows.Next() {
		var i Item
		if err := rows.Scan(
			&i.AssetID,
			&i.MarketHashName,
			&i.Price,
			&i.Appid,
			&i.Time,
			&i.Image,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getItemsPriceDESC = `-- name: GetItemsPriceDESC :many
SELECT asset_id, market_hash_name, price, appid, time, image FROM items ORDER BY price DESC
`

func (q *Queries) GetItemsPriceDESC(ctx context.Context) ([]Item, error) {
	rows, err := q.db.QueryContext(ctx, getItemsPriceDESC)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Item
	for rows.Next() {
		var i Item
		if err := rows.Scan(
			&i.AssetID,
			&i.MarketHashName,
			&i.Price,
			&i.Appid,
			&i.Time,
			&i.Image,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getItemsTimeASC = `-- name: GetItemsTimeASC :many
SELECT asset_id, market_hash_name, price, appid, time, image FROM items ORDER BY time ASC
`

func (q *Queries) GetItemsTimeASC(ctx context.Context) ([]Item, error) {
	rows, err := q.db.QueryContext(ctx, getItemsTimeASC)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Item
	for rows.Next() {
		var i Item
		if err := rows.Scan(
			&i.AssetID,
			&i.MarketHashName,
			&i.Price,
			&i.Appid,
			&i.Time,
			&i.Image,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getItemsTimeDESC = `-- name: GetItemsTimeDESC :many
SELECT asset_id, market_hash_name, price, appid, time, image FROM items ORDER BY time DESC
`

func (q *Queries) GetItemsTimeDESC(ctx context.Context) ([]Item, error) {
	rows, err := q.db.QueryContext(ctx, getItemsTimeDESC)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Item
	for rows.Next() {
		var i Item
		if err := rows.Scan(
			&i.AssetID,
			&i.MarketHashName,
			&i.Price,
			&i.Appid,
			&i.Time,
			&i.Image,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const get_All_Users = `-- name: Get_All_Users :many
SELECT
    name, email, password
FROM
    users
`

func (q *Queries) Get_All_Users(ctx context.Context) ([]User, error) {
	rows, err := q.db.QueryContext(ctx, get_All_Users)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(&i.Name, &i.Email, &i.Password); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const get_User = `-- name: Get_User :one
SELECT name, email, password
FROM users
WHERE EMAIL = ?1
`

func (q *Queries) Get_User(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRowContext(ctx, get_User, email)
	var i User
	err := row.Scan(&i.Name, &i.Email, &i.Password)
	return i, err
}
